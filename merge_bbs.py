#! /usr/bin/env python
# -*- coding: utf-8 -*-
# Colm Coughlan 16.3.2015
# Merge two bbs files, assuming second is contained entirely within the radius of the first and should be used preferentially after clipping
# N.B. Clipping could be a very good idea for thermal sources in the second dataset if the imaging freq is far from its ref. frequency as PyBDSM assumes a spectral index of -0.8

import sys
import numpy as np
from pylab import plot,show

min_length = 3	# ignore entry lines shorter than this
min_size = 1e-10	# SAGECal chunk size (hybrid solution intervals only)


# function to convert RA and DEC strings into degree floats

def gen_coords(data, ra_col, dec_col):
	coords = np.zeros((len(data),2),dtype=float)
	for i in range(len(data)):
		ra = data[i,ra_col].split(':')
		coords[i,0] = float(ra[0])*15 + float(ra[1])*0.25 + float(ra[2])/240.0
		dec = data[i,dec_col].split('.',2)
		coords[i,1] = float(dec[0]) + float(dec[1])/60.0 + float(dec[2])/3600.0
	return(coords)

def get_format(filename, format_dict):
	# Attempt to open input file

	try:
		f = open(filename)
	except:
		print("\t Error opening "+filename)
		sys.exit()


	# Read format string and get rid of any blank lines or comments

	ctr = 0
	nodata=True
	key_list = format_dict.keys()
	while(nodata):
		line = f.readline()
		# Check for blank lines or comments
		if( len(line)<min_length or line[0]=='#' ):
			ctr = ctr + 1
		else:
			# read format string
			if( line.split(" ")[0]=='format' ):
				saved_format = line
				formatstr = (line.rstrip('\n')).split(" = ")[1].split(", ")
				print("\t Detected format line from "+filename+" = "+str(formatstr))
				for i in range(len(formatstr)):
					for j in range(len(key_list)):
						if formatstr[i]==key_list[j]:
							format_dict[ key_list[j] ] = i
						else:
							if formatstr[i].split("=")[0]==key_list[j]:
								format_dict[ key_list[j] ] = i
				ctr = ctr + 1
			else:
				# presume we have reached the data
				nodata=False
				f.close()
	return(format_dict , ctr)

	

# Check arguments

if(len(sys.argv)!=8):
	print("\t Error: Takes 7 arguments.")
	print("\t Useage: merge_bbs <filename1> <filename2> <centre> <radius> <clip filename 2 at (Jy)> <outputname> <type>")
	print('\t Centre should be in the form 04:21:59.408_+19.32.07.147')
	print('\t Radius is assumed to be in as')
	print('\t Type = 0 for bbs, 1 for SAGEcal local sky model')
	sys.exit()
else:
	inputname1 = str(sys.argv[1])
	inputname2 = str(sys.argv[2])
	centre = str(sys.argv[3])
	ra = centre.split("_")[0].split(':')
	dec = centre.split("_")[1].split('.',3)
	centre_coords = [ float(ra[0])*15 + float(ra[1])*0.25 + float(ra[2])/240.0 , float(dec[0]) + float(dec[1])/60.0 + float(dec[2])/360.]
	radius = float(sys.argv[4])/3600.
	clip = float(sys.argv[5])
	outputname = str(sys.argv[6])
	outputtype = int(sys.argv[7])
	print("\t Reading: "+inputname1+", "+inputname2)
	print("\t Writing: "+outputname)

# Obtain the column numbers corresponding to different quantities from the format line of the BBS file

key_list = ['Name' , 'Type', 'Ra', 'Dec', 'I', 'Q', 'U', 'V', 'MajorAxis', 'MinorAxis', 'Orientation', 'ReferenceFrequency', 'SpectralIndex']
num_keys = len(key_list)
init_vals = [-1] * num_keys
format_dict1 = dict(zip(key_list,init_vals))
format_dict2 = dict(zip(key_list,init_vals))

format_dict1 , i = get_format(inputname1, format_dict1)
format_dict2 , j = get_format(inputname2, format_dict2)
print('\t Recorded format from '+inputname1+' = '+str(format_dict1))
print('\t Recorded format from '+inputname2+' = '+str(format_dict2))

# Read in data as strings, skipping comments etc.

data1 = np.genfromtxt(inputname1,delimiter=', ',dtype=str,skip_header = i-1)
data2 = np.genfromtxt(inputname2,delimiter=', ',dtype=str,skip_header = j-1)

# Convert to coords in degrees
coords1 = gen_coords(data1,format_dict1['Ra'],format_dict1['Dec'])

# Write out as BBS
nclip = 0
if outputtype==0:
	format_line = 'format = Name, Type, Ra, Dec, I, Q, U, V, MajorAxis, MinorAxis, Orientation, ReferenceFrequency=\''+str(data1[0][ format_dict1['ReferenceFrequency'] ])+'\', SpectralIndex=\'[]\''

	try:
		f = open(outputname,'w')
	except:
		print "\t Error opening ", outputname
		sys.exit()

	f.write('# BBS sky model\n')
	f.write('# Generated by merge_bbs.py.\n')
	f.write(format_line)
	f.write('\n')


	for i in range(len(data2)):
		if(float(data2[i][ format_dict2['I'] ])>clip):
			f.write(data2[i][ format_dict2[key_list[0]] ])
			for j in range(1,num_keys):
				f.write(', '+data2[i][ format_dict2[key_list[j]] ])
			f.write('\n')
		else:
			nclip = nclip + 1

	x = np.subtract(coords1, centre_coords)	# find radius of each point in first dataset
	rad_lst = np.sum(np.abs(x)**2,axis=-1)**(1./2)

	kept = 0
	for i in range(len(data1)):
		if rad_lst[i] > radius:
			kept = kept + 1
			f.write(data1[i][ format_dict1[key_list[0]] ])
			for j in range(1,num_keys):
				f.write(', '+data1[i][ format_dict1[key_list[j]] ])
			f.write('\n')

	f.close
	print('\t Merger complete.')
	print('\t\t '+str(nclip)+' sources out of '+str(len(data2))+' clipped from '+inputname2)
	print('\t\t '+str(len(data1) - kept)+' sources out of '+str(len(data1))+' excluded from '+inputname1)
	print('\t\t '+str(len(data2) + kept - nclip)+' sources in '+outputname)
	print('\t\t Warning: No check for bad Gaussians performed. If using SAGECal use this mode for gencluster2 input, but mode=1 for SAGECal input.')

# Write out as LSM

else:
	nbad = 0
	nclip = 0
	try:
		f = open(outputname,'w')
	except:
		print "\tError opening ", outputname
		sys.exit()

	f.write('# SAGECal sky model\n')
	f.write('# Generated by merge_bbs.py. IMPORTANT: A value of zero has been assumed for all RM values. merge_bbs.py does not import them.\n')
	f.write('# Name  | RA (hr,min,sec) | DEC (deg,min,sec) | I | Q | U | V | SI | RM | eX | eY | eP | freq0\n')
	f.write('\n')

	for i in range(len(data2)):
		if(float(data2[i][format_dict2['I']])>clip):
			if(data2[i][type_col] == 'GAUSSIAN'):
				f.write('G'+data2[i][0])
			else:
				f.write('P'+data2[i][0])
			f.write(' '+data2[i][ format_dict2['Ra'] ].replace(":"," "))
			f.write(' '+data2[i][ format_dict2['Dec'] ].replace("."," ",2))
			f.write(' '+data2[i][ format_dict2['I'] ])
			f.write(' '+data2[i][ format_dict2['Q'] ])
			f.write(' '+data2[i][ format_dict2['U'] ])
			f.write(' '+data2[i][ format_dict2['V'] ])
			f.write(' '+data2[i][ format_dict2['SpectralIndex'] ].strip('[]'))
			f.write(' 0') # Assuming zero RM
			f.write(' '+str(float(data2[i][ format_dict2['MajorAxis'] ])*(np.pi/180.0)/(2*3600.0)))
			if ((float(data2[i][ format_dict2['MinorAxis'] ]) > min_size and data2[i][type_col] == 'GAUSSIAN') or data2[i][type_col] == 'POINT'):
				f.write(' '+str(float(data2[i][ format_dict2['MinorAxis'] ])*(np.pi/180.0)/(2*3600.0))) # Watch out for unusually low bmin - > Bug in PyBDSM write_catalog? The corresponding fits look fine in the viewer
			else:
				f.write(' '+str(float(data2[i][ format_dict2['MajorAxis'] ])*(np.pi/180.0)/(2*3600.0)))
				nbad = nbad + 1
			f.write(' '+str((float(data2[i][ format_dict2['Orientation'] ])-90.0)*(np.pi/180.0)))
			f.write(' '+data2[i][ format_dict2['ReferenceFrequency'] ])
			f.write('\n')
		else:
			nclip = nclip + 1

	x = np.subtract(coords1, centre_coords)	# find radius of each point in first dataset
	rad_lst = np.sum(np.abs(x)**2,axis=-1)**(1./2)

	kept = 0
	for i in range(len(data1)):
		if rad_lst[i] > radius:
			kept = kept + 1
			if(data1[i][type_col] == 'GAUSSIAN'):
				f.write('G'+data1[i][0])
			else:
				f.write('P'+data1[i][0])
			f.write(' '+data1[i][ format_dict1['Ra'] ].replace(":"," "))
			f.write(' '+data1[i][ format_dict1['Dec'] ].replace("."," ",2))
			f.write(' '+data1[i][ format_dict1['I'] ])
			f.write(' '+data1[i][ format_dict1['Q'] ])
			f.write(' '+data1[i][ format_dict1['U'] ])
			f.write(' '+data1[i][ format_dict1['V'] ])
			f.write(' '+data1[i][ format_dict1['SpectralIndex'] ].strip('[]'))
			f.write(' 0') # Assuming zero RM
			f.write(' '+str(float(data1[i][ format_dict1['MajorAxis'] ])*(np.pi/180.0)/(2*3600.0)))
			if ((float(data1[i][ format_dict1['MinorAxis'] ]) > min_size and data1[i][type_col] == 'GAUSSIAN') or data1[i][type_col] == 'POINT'):
				f.write(' '+str(float(data1[i][ format_dict1['MinorAxis'] ])*(np.pi/180.0)/(2*3600.0))) # Watch out for unusually low bmin - > Bug in PyBDSM write_catalog? The corresponding fits look fine in the viewer
			else:
				f.write(' '+str(float(data1[i][ format_dict1['MajorAxis'] ])*(np.pi/180.0)/(2*3600.0)))
				nbad = nbad + 1
			f.write(' '+str((float(data1[i][ format_dict1['Orientation'] ])-90.0)*(np.pi/180.0)))
			f.write(' '+data1[i][ format_dict1['ReferenceFrequency'] ])
			f.write('\n')

	f.close
	print('\t Merger complete.')
	print('\t\t '+str(nclip)+' sources out of '+str(len(data2))+' clipped from '+inputname2)
	print('\t\t '+str(len(data1) - kept)+' sources out of '+str(len(data1))+' excluded from '+inputname1)
	print('\t\t '+str(len(data2) + kept - nclip)+' sources in '+outputname)
	print('\t\t A total of '+str(nbad)+' bad Gaussians detected and assumed to be circular')

