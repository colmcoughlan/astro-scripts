#! /usr/bin/env python
# -*- coding: utf-8 -*-
# Colm Coughlan 30.10.2015
# Convert between BBS and Sagecal LSM files (back and forth)

import sys
import numpy as np
from pylab import plot,show

min_length = 3	# ignore entry lines shorter than this
min_size = 1e-10	# SAGECal chunk size (hybrid solution intervals only)


def get_format(filename, format_dict):
	# Attempt to open input file

	try:
		f = open(filename)
	except:
		print("\t Error opening "+filename)
		sys.exit()


	# Read format string and get rid of any blank lines or comments

	ctr = 0
	nodata=True
	key_list = format_dict.keys()
	while(nodata):
		line = f.readline()
		# Check for blank lines or comments
		if( len(line)<min_length or line[0]=='#' ):
			ctr = ctr + 1
		else:
			# read format string
			if( line.split(" ")[0]=='format' ):
				saved_format = line
				formatstr = (line.rstrip('\n')).split(" = ")[1].split(", ")
				print("\t Detected format line from "+filename+" = "+str(formatstr))
				for i in range(len(formatstr)):
					for j in range(len(key_list)):
						if formatstr[i]==key_list[j]:
							format_dict[ key_list[j] ] = i
						else:
							if formatstr[i].split("=")[0]==key_list[j]:
								format_dict[ key_list[j] ] = i
								ref_freq = formatstr[i].split("=")[1].split("'")[1]
				ctr = ctr + 1
			else:
				# presume we have reached the data
				nodata=False
				f.close()
	return(format_dict , ctr, ref_freq)

	

# Check arguments

if(len(sys.argv)!=4):
	print("\t Error: Takes 3 arguments.")
	print("\t Useage: bbs_lsm_convert <filename1> <outputname> <type>")
	print('\t Type = 0 for BBS to SAGEcal LSM, 1 for LSM to BBS')
	print('\t N.B. Currently assuming a constant reference frequency in BBS header.')
	sys.exit()
else:
	inputname1 = str(sys.argv[1])
	outputname = str(sys.argv[2])
	outputtype = int(sys.argv[3])
	print("\t Reading: "+inputname1)
	print("\t Writing: "+outputname)

# Obtain the column numbers corresponding to different quantities from the format line of the BBS file

key_list = ['Name' , 'Type', 'Ra', 'Dec', 'I', 'Q', 'U', 'V', 'MajorAxis', 'MinorAxis', 'Orientation', 'ReferenceFrequency', 'SpectralIndex']
num_keys = len(key_list)
init_vals = [-1] * num_keys
format_dict1 = dict(zip(key_list,init_vals))

format_dict1 , i, ref_freq = get_format(inputname1, format_dict1)
print('\t Recorded format from '+inputname1+' = '+str(format_dict1))

# Read in data as strings, skipping comments etc.

data1 = np.genfromtxt(inputname1,delimiter=', ',dtype=str,skip_header = i-1)

try:
	f = open(outputname,'w')
except:
	print "\tError opening ", outputname
	sys.exit()

f.write('# SAGECal sky model\n')
f.write('# Generated by bbs_lsm_convert.py. IMPORTANT: A value of zero has been assumed for all RM values. bbs_lsm_convert.py does not import them.\n')
f.write('# Name  | RA (hr,min,sec) | DEC (deg,min,sec) | I | Q | U | V | SI | RM | eX | eY | eP | freq0\n')
f.write('\n')

for i in range(len(data1)):
	if(data1[i][format_dict1['Type']] == 'GAUSSIAN'):
		f.write('G'+data1[i][0])
	else:
		f.write('P'+data1[i][0])
	f.write(' '+data1[i][ format_dict1['Ra'] ].replace(":"," "))
	f.write(' '+data1[i][ format_dict1['Dec'] ].replace("."," ",2))
	f.write(' '+data1[i][ format_dict1['I'] ])
	if(format_dict1['Q'] != -1):
		f.write(' '+data1[i][ format_dict1['Q'] ])
	else:
		f.write(' 0')
	if(format_dict1['U'] != -1):
		f.write(' '+data1[i][ format_dict1['U'] ])
	else:
		f.write(' 0')
	if(format_dict1['V'] != -1):
		f.write(' '+data1[i][ format_dict1['V'] ])
	else:
		f.write(' 0')
	if(format_dict1['SpectralIndex'] != -1):
		f.write(' '+data1[i][ format_dict1['SpectralIndex'] ].strip('[]'))
	else:
		f.write(' 0')
	f.write(' 0') # Assuming zero RM
	if(format_dict1['MajorAxis'] != -1):
		f.write(' '+str(float(data1[i][ format_dict1['MajorAxis'] ])*(np.pi/180.0)/(2*3600.0)))
		if ((float(data1[i][ format_dict1['MinorAxis'] ]) > min_size and data1[i][format_dict1['Type']] == 'GAUSSIAN') or data1[i][format_dict1['Type']] == 'POINT'):
			f.write(' '+str(float(data1[i][ format_dict1['MinorAxis'] ])*(np.pi/180.0)/(2*3600.0))) # Watch out for unusually low bmin - > Bug in PyBDSM write_catalog? The corresponding fits look fine in the viewer
		else:
			f.write(' '+str(float(data1[i][ format_dict1['MajorAxis'] ])*(np.pi/180.0)/(2*3600.0)))
			nbad = nbad + 1
		f.write(' '+str((float(data1[i][ format_dict1['Orientation'] ])-90.0)*(np.pi/180.0)))
	else:
		f.write(' 0 0 0')
	f.write(' '+str(float(ref_freq)))
	f.write('\n')

f.close


