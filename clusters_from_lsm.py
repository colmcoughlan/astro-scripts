#! /usr/bin/env python
# Filter Sagecal LSM
# Colm Coughlan. 3.9.15

import sys
import numpy as np
import scipy.spatial
import pandas

# Returns values in degrees

def gen_coords(h_ra, m_ra, s_ra, d_dec, m_dec, s_dec):
	coords = np.zeros((len(h_ra),2),dtype=float)
	coords[:,0] = np.multiply(h_ra,15.0) + np.multiply(m_ra,0.25) + np.divide(s_ra,240.0)
	coords[:,1] = d_dec + np.divide(m_dec,60.0) + np.divide(s_dec,3600.0)
	return(coords)

# Check arguments

if(len(sys.argv)!=5):
	print("\tError: Takes 4 arguments.")
	print("\tUseage: gsmfilter <skymodel> <outputname_stem> <parameterfile> <lsm version>")
	print("\tParameter format: \"phase_centre, radius\"")
	print("\tInclude the header line: h_ra m_ra s_ra d_dec m_dec s_dec radius")
	print("\tPhase centre: eg. 04 21 59.4 +19 32 06, 1")
	print("\tAllowed radius (as)")
	print("\tLSM version 0 : single spectral index, 1 : 3 order spectral index.")
	sys.exit()
else:
	inputname = str(sys.argv[1])
	outputname = str(sys.argv[2])
	parameterfile = str(sys.argv[3])
	spectral_index_version = int(sys.argv[4])
	print '\tReading:', inputname
	print '\tWriting:', outputname


df_parm = pandas.read_csv(parameterfile,delimiter=' ')
coords_pc = gen_coords(df_parm['h_ra'].astype(np.float), df_parm['m_ra'].astype(np.float), df_parm['s_ra'].astype(np.float), df_parm['d_dec'].astype(np.float), df_parm['m_dec'].astype(np.float), df_parm['s_dec'].astype(np.float))

if spectral_index_version == 0:
	column_names_str = 'name h_ra m_ra s_ra d_dec m_dec s_dec I Q U V spectral_index0 RM extent_X extent_Y pos_angle freq0'
else:
	column_names_str = 'name h_ra m_ra s_ra d_dec m_dec s_dec I Q U V spectral_index0 spectral_index1 spectral_index2 RM extent_X extent_Y pos_angle freq0'
column_names = column_names_str.split(' ')

df1 = pandas.read_csv(inputname,skiprows=4,delimiter='\s+', names=column_names, header = None)

print('\t'+str(len(df1))+' sources read from '+inputname)
#print(str(df1.ix[0]))
coords = gen_coords(df1['h_ra'].astype(np.float), df1['m_ra'].astype(np.float), df1['s_ra'].astype(np.float), df1['d_dec'].astype(np.float), df1['m_dec'].astype(np.float), df1['s_dec'].astype(np.float))

distances = scipy.spatial.distance.cdist( coords , coords_pc,'euclidean')
distances = distances.T

#source = str(df_parm.ix[cluster]['h_ra']) + ':' + str(df_parm.ix[cluster]['m_ra']) + ':' + str(df_parm.ix[cluster]['s_ra']) + ', ' + str(df_parm.ix[cluster]['d_dec']) + '.' + str(df_parm.ix[cluster]['m_dec']) + '.' + str(df_parm.ix[cluster]['s_dec'])
keep=[]
cluster_keep=[]
for cluster in range(len(df_parm)):
	new_list = np.flatnonzero(distances[cluster] < (float(df_parm['radius'][cluster]) / 3600.0) )
	keep.extend(new_list)
	cluster_keep.append(new_list)


print('\t'+str(len(keep))+' canditate source(s) detected.')



# Write out LSM file with models in clusters

try:
	f = open(outputname+'.lsm.txt','w')
except:
	print "\tError opening ", outputname
	sys.exit()

f.write('# SAGECal sky model\n')
f.write('# Generated by lsmfilter.py. Filtered according to parameters in '+parameterfile+'.\n')
f.write('# '+column_names_str+'\n')
f.write('\n')

(df1.ix[keep]).to_csv(f,sep=' ', header=None, index = False)

f.close()


# Write out LSM file with model that did not fit in any cluster

not_keep = np.arange(0,len(df1),1)
not_keep = np.delete(not_keep, keep)

try:
	f = open(outputname+'.not_clustered.lsm.txt','w')
except:
	print "\tError opening ", outputname
	sys.exit()

f.write('# SAGECal sky model\n')
f.write('# Generated by lsmfilter.py. Filtered according to parameters in '+parameterfile+'. These are the models that were not found to be in any cluster.\n')
f.write('# The next output is a single line containing a cluster containing all of them, just in case.\n')
f.write('# -1 1')
for i in not_keep:
	if(df1.ix[i].notnull()[0]):
		f.write(' '+str(df1.ix[i]['name']))
f.write('\n')
f.write('# '+column_names_str+'\n')
f.write('\n')

(df1.ix[not_keep]).to_csv(f,sep=' ', header=None, index = False)

f.close()





# Write out cluster file


try:
	f = open(outputname+'.cluster.txt','w')
except:
	print "\tError opening ", outputname
	sys.exit()

f.write('# SAGECal cluster file\n')
f.write('# Generated by lsmfilter.py. Clusters assigned according to parameters in '+parameterfile+'.\n')
f.write('\n')

#(df1.ix[keep]['name']).to_csv(f,sep=' ',line_terminator=' ', header=None)# out of date Pandas doesn't have line terminator option!
for cluster in range(len(cluster_keep)):
	f.write(str(cluster)+' 1')
	for i in cluster_keep[cluster]:
		f.write(' '+str(df1.ix[i]['name']))
	f.write('\n')

f.close()

	
