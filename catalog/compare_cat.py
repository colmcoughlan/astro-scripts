#! /usr/bin/env python
# Colm Coughlan 20.8.2015
# Dublin Institute for Advanced Studies

import sys
import numpy as np
import scipy.spatial

def gen_coords(data, ra_col, dec_col):
	coords = np.zeros((len(data),2),dtype=float)
	for i in range(len(data)):
		ra = data[i,ra_col].split(':')
		coords[i,0] = float(ra[0])*15 + float(ra[1])*0.25 + float(ra[2])/240.0
		dec = data[i,dec_col].split('.',2)
		coords[i,1] = float(dec[0]) + float(dec[1])/60.0 + float(dec[2])/3600.0
	return(coords)

def get_format(filename, format_dict):
	# Attempt to open input file

	try:
		f = open(filename)
	except:
		print("\t Error opening "+filename)
		sys.exit()

	min_length = 3	# ignore entry lines shorter than this
	# Read format string and get rid of any blank lines or comments

	ctr = 0
	nodata=True
	key_list = format_dict.keys()
	while(nodata):
		line = f.readline()
		# Check for blank lines or comments
		if( len(line)<min_length or line[0]=='#' ):
			ctr = ctr + 1
		else:
			# read format string
			if( line.split(" ")[0]=='format' ):
				saved_format = line
				formatstr = (line.rstrip('\n')).split(" = ")[1].split(", ")
				print("\t Detected format line from "+filename+" = "+str(formatstr))
				for i in range(len(formatstr)):
					for j in range(len(key_list)):
						if formatstr[i]==key_list[j]:
							format_dict[ key_list[j] ] = i
						else:
							if formatstr[i].split("=")[0]==key_list[j]:
								format_dict[ key_list[j] ] = i
				ctr = ctr + 1
			else:
				# presume we have reached the data
				nodata=False
				f.close()
	return(format_dict , ctr)


# Check arguments

if(len(sys.argv)!=5):
	print("\t Error: Takes 4 arguments.")
	print("\t Useage: compare_cat <filename1> <filename2> <radius> <outputname>")
	print('\t Radius is assumed to be in as')
	sys.exit()
else:
	inputname1 = str(sys.argv[1])
	inputname2 = str(sys.argv[2])
	radius = float(sys.argv[3])/3600.
	outputname = str(sys.argv[4])
	print("\t Reading: "+inputname1+", "+inputname2)
	print("\t Writing: "+outputname)


key_list = ['Name' , 'Type', 'Ra', 'Dec', 'I', 'Q', 'U', 'V', 'MajorAxis', 'MinorAxis', 'Orientation', 'ReferenceFrequency', 'SpectralIndex']
num_keys = len(key_list)
init_vals = [-1] * num_keys
format_dict1 = dict(zip(key_list,init_vals))
format_dict2 = dict(zip(key_list,init_vals))

format_dict1 , i = get_format(inputname1, format_dict1)
format_dict2 , j = get_format(inputname2, format_dict2)
print('\t Recorded format from '+inputname1+' = '+str(format_dict1))
print('\t Recorded format from '+inputname2+' = '+str(format_dict2))



# Read in data as strings, skipping comments etc.

data1 = np.genfromtxt(inputname1,delimiter=', ',dtype=str,skip_header = i-1)
data2 = np.genfromtxt(inputname2,delimiter=', ',dtype=str,skip_header = j-1)

# Convert to coords in degrees
coords1 = gen_coords(data1,format_dict1['Ra'],format_dict1['Dec'])
coords2 = gen_coords(data2,format_dict2['Ra'],format_dict2['Dec'])


# Match sources

distances = scipy.spatial.distance.cdist(coords1 , coords2,'euclidean')

min_distance = np.amin(distances,axis=1)
min_distance_index = np.argmin(distances, axis=1)
spx_list = np.zeros((len(coords1),1))

i=43
print('Source '+data1[i][format_dict1['Name']]+' has '+data2[min_distance_index[i]][format_dict1['Name']]+' as its closet neightbour at a distance of '+str(min_distance[i])+' degrees.')

# Find Spectral indices if sources are close enough to be considered the same. Identify thermal sources

freq_ratio = np.log(float(data1[0][format_dict1['ReferenceFrequency']])/float(data2[0][format_dict2['ReferenceFrequency']]))

for i in range(len(coords1)):
	if(i==43):
		print('Min distance[i] = '+str(min_distance[i])+', needs to be < '+str(radius))
	if(min_distance[i] < radius):
		if(i==43):
			spx = np.log(float(data1[i][format_dict1['I']])/float(data2[min_distance_index[i]][format_dict2['I']])) / freq_ratio
			print('Made it: '+data1[i][format_dict1['Name']]+', spx = '+str(spx))
		spx = np.log(float(data1[i][format_dict1['I']])/float(data2[min_distance_index[i]][format_dict2['I']])) / freq_ratio
		spx_list[i] = spx
		data1[i][format_dict1['SpectralIndex']] = '['+str(spx)+']'
	else:
		spx_list[i] = -999
		data1[i][format_dict1['SpectralIndex']] = '[N/A]'

# Identify any thermal sources

for i in range(len(coords1)):
	if( spx_list[i] > 0):
		print('Thermal source detected: '+data1[i][format_dict1['Name']])

# Now write new catalog with spectral indices

format_line = 'format = Name, Type, Ra, Dec, I, Q, U, V, MajorAxis, MinorAxis, Orientation, ReferenceFrequency=\''+str(data1[0][ format_dict1['ReferenceFrequency'] ])+'\', SpectralIndex=\'[]\''

with open(outputname,'w') as f:
	f.write('# BBS sky model\n')
	f.write('# Generated by compare_cat.py.\n')
	f.write(format_line)
	f.write('\n')


	for i in range(len(data1)):
		f.write(data1[i][ format_dict1[key_list[0]] ])
		for j in range(1,num_keys):
			f.write(', '+data1[i][ format_dict1[key_list[j]] ])
		f.write('\n')

print('Spectral index catalog complete.')

